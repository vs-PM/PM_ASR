import sys
import torch
from faster_whisper import WhisperModel

def load_whisper_model(model_size="Large-v3"):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å Whisper —Å–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π fallback:
    1Ô∏è float16 (–±—ã—Å—Ç—Ä–æ, –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    2Ô∏è int8_float16 (—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ –¥–ª—è L4/T4)
    3Ô∏è int8 (–º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å, –Ω–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ)
    """
    candidates = ["float16", "int8_float16", "int8"]

    for ctype in candidates:
        try:
            print(f"üîÑ –ü—ã—Ç–∞—é—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å '{model_size}' c compute_type={ctype}...")
            model = WhisperModel(model_size, device="cuda", compute_type=ctype)

            if torch.cuda.is_available():
                # warm-up CUDA
                _ = torch.randn(1).to("cuda")
                torch.cuda.synchronize()
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —Å compute_type={ctype}")
            return model

        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å compute_type={ctype}: {e}")
            continue

    raise RuntimeError("–ù–∏ –æ–¥–∏–Ω compute_type –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª!")


def main(audio_file: str):
    print("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ CUDA ===")
    print("CUDA available:", torch.cuda.is_available())
    print("CUDA version:", torch.version.cuda)
    print("cuDNN version:", torch.backends.cudnn.version())

    # –≥—Ä—É–∑–∏–º –º–æ–¥–µ–ª—å —Å fallback
    model = load_whisper_model("small")

    print(f"‚ñ∂Ô∏è –ù–∞—á–∏–Ω–∞—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Ñ–∞–π–ª–∞: {audio_file}")
    try:
        segments, info = model.transcribe(audio_file, beam_size=5, language="ru")

        print("### –ò–Ω—Ñ–æ –ø–æ –∞—É–¥–∏–æ ###")
        print(info)

        print("\n### –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ ###")
        for i, seg in enumerate(segments, start=1):
            print(f"[{i}] {seg.start:.2f}s ‚Üí {seg.end:.2f}s: {seg.text}")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏:", e)
        raise


if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: python test_whisper_stable.py <path-to-audio>")
        sys.exit(1)
    main(sys.argv[1])